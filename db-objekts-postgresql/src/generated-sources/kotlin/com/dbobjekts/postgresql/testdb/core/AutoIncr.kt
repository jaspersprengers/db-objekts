package com.dbobjekts.postgresql.testdb.core

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.metadata.Table
import com.dbobjekts.api.TableRowData
import com.dbobjekts.metadata.column.IsGeneratedPrimaryKey
import com.dbobjekts.api.exception.StatementBuilderException
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.UpdateBuilderBase


/**           
 * Auto-generated metadata object for db table core.auto_incr.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: none
 *
 * Foreign keys: [] 
 */
object AutoIncr:Table<AutoIncrRow>("auto_incr"), HasUpdateBuilder<AutoIncrUpdateBuilder, AutoIncrInsertBuilder> {
    /**
     * Represents db column core.auto_incr.id
     */
    val id = com.dbobjekts.metadata.column.LongColumn(this, "id")
    /**
     * Represents db column core.auto_incr.name
     */
    val name = com.dbobjekts.metadata.column.VarcharColumn(this, "name")
    override val columns: List<AnyColumn> = listOf(id,name)
    override fun toValue(values: List<Any?>) = AutoIncrRow(values[0] as Long,values[1] as String)
    override fun metadata(): WriteQueryAccessors<AutoIncrUpdateBuilder, AutoIncrInsertBuilder> = WriteQueryAccessors(AutoIncrUpdateBuilder(), AutoIncrInsertBuilder())
}

class AutoIncrUpdateBuilder() : UpdateBuilderBase(AutoIncr) {
    fun id(value: Long): AutoIncrUpdateBuilder = put(AutoIncr.id, value)
    fun name(value: String): AutoIncrUpdateBuilder = put(AutoIncr.name, value)

    /**
     * Warning: this method will throw a StatementBuilderException at runtime because AutoIncr does not have a primary key.
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long = 
      throw StatementBuilderException("Sorry, but you cannot use row-based updates for table AutoIncr. At least one column must be marked as primary key.")                
            
}

class AutoIncrInsertBuilder():InsertBuilderBase(){
    fun id(value: Long): AutoIncrInsertBuilder = put(AutoIncr.id, value)
    fun name(value: String): AutoIncrInsertBuilder = put(AutoIncr.name, value)

    fun mandatoryColumns(id: Long, name: String) : AutoIncrInsertBuilder {
      mandatory(AutoIncr.id, id)
      mandatory(AutoIncr.name, name)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as AutoIncrRow
      add(AutoIncr.id, rowData.id)
      add(AutoIncr.name, rowData.name)
      return execute()
    }    
        
}


data class AutoIncrRow(
  val id: Long,
  val name: String    
) : TableRowData<AutoIncrUpdateBuilder, AutoIncrInsertBuilder>(AutoIncr.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>()
}
        
