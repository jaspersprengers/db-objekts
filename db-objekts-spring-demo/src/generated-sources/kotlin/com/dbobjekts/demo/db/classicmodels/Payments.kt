package com.dbobjekts.demo.db.classicmodels

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.TableRowData
import com.dbobjekts.metadata.Table
import com.dbobjekts.metadata.column.DateColumn
import com.dbobjekts.metadata.column.DoubleColumn
import com.dbobjekts.metadata.column.ForeignKeyLongColumn
import com.dbobjekts.metadata.column.VarcharColumn
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.statement.update.UpdateBuilderBase

/**           
 * Auto-generated metadata object for db table classicmodels.payments.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: [customerNumber, checkNumber]
 *
 * Foreign keys to: 
 * References by: classicmodels.customers
 */
object Payments:Table<PaymentsRow>("payments"), HasUpdateBuilder<PaymentsUpdateBuilder, PaymentsInsertBuilder> {
    /**
     * Represents db column classicmodels.payments.customerNumber
     *
     * Foreign key to classicmodels.customers.customerNumber
     */
    val customerNumber = ForeignKeyLongColumn(this, "customerNumber", Customers.customerNumber)
    /**
     * Represents db column classicmodels.payments.checkNumber
     */
    val checkNumber = VarcharColumn(this, "checkNumber")
    /**
     * Represents db column classicmodels.payments.paymentDate
     */
    val paymentDate = DateColumn(this, "paymentDate")
    /**
     * Represents db column classicmodels.payments.amount
     */
    val amount = DoubleColumn(this, "amount")
    override val columns: List<AnyColumn> = listOf(customerNumber,checkNumber,paymentDate,amount)
    override fun toValue(values: List<Any?>) = PaymentsRow(values[0] as Long,values[1] as String,values[2] as java.time.LocalDate,values[3] as Double)
    override fun metadata(): WriteQueryAccessors<PaymentsUpdateBuilder, PaymentsInsertBuilder> = WriteQueryAccessors(PaymentsUpdateBuilder(), PaymentsInsertBuilder())
}

class PaymentsUpdateBuilder() : UpdateBuilderBase(Payments) {
    fun customerNumber(value: Long): PaymentsUpdateBuilder = put(Payments.customerNumber, value)
    fun checkNumber(value: String): PaymentsUpdateBuilder = put(Payments.checkNumber, value)
    fun paymentDate(value: java.time.LocalDate): PaymentsUpdateBuilder = put(Payments.paymentDate, value)
    fun amount(value: Double): PaymentsUpdateBuilder = put(Payments.amount, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as PaymentsRow
      add(Payments.customerNumber, rowData.customerNumber)
      add(Payments.checkNumber, rowData.checkNumber)
      add(Payments.paymentDate, rowData.paymentDate)
      add(Payments.amount, rowData.amount)
      return where(Payments.customerNumber.eq(rowData.customerNumber).and(Payments.checkNumber.eq(rowData.checkNumber)))
    }    
        
}

class PaymentsInsertBuilder():InsertBuilderBase(){
    fun customerNumber(value: Long): PaymentsInsertBuilder = put(Payments.customerNumber, value)
    fun checkNumber(value: String): PaymentsInsertBuilder = put(Payments.checkNumber, value)
    fun paymentDate(value: java.time.LocalDate): PaymentsInsertBuilder = put(Payments.paymentDate, value)
    fun amount(value: Double): PaymentsInsertBuilder = put(Payments.amount, value)

    fun mandatoryColumns(customerNumber: Long, checkNumber: String, paymentDate: java.time.LocalDate, amount: Double) : PaymentsInsertBuilder {
      mandatory(Payments.customerNumber, customerNumber)
      mandatory(Payments.checkNumber, checkNumber)
      mandatory(Payments.paymentDate, paymentDate)
      mandatory(Payments.amount, amount)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as PaymentsRow
      add(Payments.customerNumber, rowData.customerNumber)
      add(Payments.checkNumber, rowData.checkNumber)
      add(Payments.paymentDate, rowData.paymentDate)
      add(Payments.amount, rowData.amount)
      return execute()
    }    
        
}


data class PaymentsRow(
  val customerNumber: Long,
  val checkNumber: String,
  val paymentDate: java.time.LocalDate,
  val amount: Double    
) : TableRowData<PaymentsUpdateBuilder, PaymentsInsertBuilder>(Payments.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Payments.customerNumber, customerNumber),Pair(Payments.checkNumber, checkNumber))
}
        
