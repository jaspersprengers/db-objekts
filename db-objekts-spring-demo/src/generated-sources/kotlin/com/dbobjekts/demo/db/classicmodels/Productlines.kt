package com.dbobjekts.demo.db.classicmodels

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.TableRowData
import com.dbobjekts.metadata.Table
import com.dbobjekts.metadata.column.NullableByteArrayColumn
import com.dbobjekts.metadata.column.NullableVarcharColumn
import com.dbobjekts.metadata.column.VarcharColumn
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.statement.update.UpdateBuilderBase

/**           
 * Auto-generated metadata object for db table classicmodels.productlines.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: productLine
 *
 * Foreign keys to: 
 * References by: classicmodels.products
 */
object Productlines:Table<ProductlinesRow>("productlines"), HasUpdateBuilder<ProductlinesUpdateBuilder, ProductlinesInsertBuilder> {
    /**
     * Represents db column classicmodels.productlines.productLine
     */
    val productLine = VarcharColumn(this, "productLine")
    /**
     * Represents db column classicmodels.productlines.textDescription
     */
    val textDescription = NullableVarcharColumn(this, "textDescription")
    /**
     * Represents db column classicmodels.productlines.htmlDescription
     */
    val htmlDescription = NullableVarcharColumn(this, "htmlDescription")
    /**
     * Represents db column classicmodels.productlines.image
     */
    val image = NullableByteArrayColumn(this, "image")
    override val columns: List<AnyColumn> = listOf(productLine,textDescription,htmlDescription,image)
    override fun toValue(values: List<Any?>) = ProductlinesRow(values[0] as String,values[1] as String?,values[2] as String?,values[3] as ByteArray?)
    override fun metadata(): WriteQueryAccessors<ProductlinesUpdateBuilder, ProductlinesInsertBuilder> = WriteQueryAccessors(ProductlinesUpdateBuilder(), ProductlinesInsertBuilder())
}

class ProductlinesUpdateBuilder() : UpdateBuilderBase(Productlines) {
    fun productLine(value: String): ProductlinesUpdateBuilder = put(Productlines.productLine, value)
    fun textDescription(value: String?): ProductlinesUpdateBuilder = put(Productlines.textDescription, value)
    fun htmlDescription(value: String?): ProductlinesUpdateBuilder = put(Productlines.htmlDescription, value)
    fun image(value: ByteArray?): ProductlinesUpdateBuilder = put(Productlines.image, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as ProductlinesRow
      add(Productlines.productLine, rowData.productLine)
      add(Productlines.textDescription, rowData.textDescription)
      add(Productlines.htmlDescription, rowData.htmlDescription)
      add(Productlines.image, rowData.image)
      return where(Productlines.productLine.eq(rowData.productLine))
    }    
        
}

class ProductlinesInsertBuilder():InsertBuilderBase(){
    fun productLine(value: String): ProductlinesInsertBuilder = put(Productlines.productLine, value)
    fun textDescription(value: String?): ProductlinesInsertBuilder = put(Productlines.textDescription, value)
    fun htmlDescription(value: String?): ProductlinesInsertBuilder = put(Productlines.htmlDescription, value)
    fun image(value: ByteArray?): ProductlinesInsertBuilder = put(Productlines.image, value)

    fun mandatoryColumns(productLine: String) : ProductlinesInsertBuilder {
      mandatory(Productlines.productLine, productLine)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as ProductlinesRow
      add(Productlines.productLine, rowData.productLine)
      add(Productlines.textDescription, rowData.textDescription)
      add(Productlines.htmlDescription, rowData.htmlDescription)
      add(Productlines.image, rowData.image)
      return execute()
    }    
        
}


data class ProductlinesRow(
  val productLine: String,
  val textDescription: String?,
  val htmlDescription: String?,
  val image: ByteArray?    
) : TableRowData<ProductlinesUpdateBuilder, ProductlinesInsertBuilder>(Productlines.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Productlines.productLine, productLine))
}
        
