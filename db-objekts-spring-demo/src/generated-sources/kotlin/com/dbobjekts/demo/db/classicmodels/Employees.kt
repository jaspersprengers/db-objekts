package com.dbobjekts.demo.db.classicmodels

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.TableRowData
import com.dbobjekts.metadata.Table
import com.dbobjekts.metadata.column.ForeignKeyVarcharColumn
import com.dbobjekts.metadata.column.LongColumn
import com.dbobjekts.metadata.column.OptionalForeignKeyLongColumn
import com.dbobjekts.metadata.column.VarcharColumn
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.statement.update.UpdateBuilderBase

/**           
 * Auto-generated metadata object for db table classicmodels.employees.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: employeeNumber
 *
 * Foreign keys to: classicmodels.employees,classicmodels.employees
 * References by: classicmodels.offices,classicmodels.customers
 */
object Employees:Table<EmployeesRow>("employees"), HasUpdateBuilder<EmployeesUpdateBuilder, EmployeesInsertBuilder> {
    /**
     * Represents db column classicmodels.employees.employeeNumber
     */
    val employeeNumber = LongColumn(this, "employeeNumber")
    /**
     * Represents db column classicmodels.employees.lastName
     */
    val lastName = VarcharColumn(this, "lastName")
    /**
     * Represents db column classicmodels.employees.firstName
     */
    val firstName = VarcharColumn(this, "firstName")
    /**
     * Represents db column classicmodels.employees.extension
     */
    val extension = VarcharColumn(this, "extension")
    /**
     * Represents db column classicmodels.employees.email
     */
    val email = VarcharColumn(this, "email")
    /**
     * Represents db column classicmodels.employees.officeCode
     *
     * Foreign key to classicmodels.offices.officeCode
     */
    val officeCode = ForeignKeyVarcharColumn(this, "officeCode", Offices.officeCode)
    /**
     * Represents db column classicmodels.employees.reportsTo
     *
     * Foreign key to classicmodels.employees.employeeNumber
     */
    val reportsTo = OptionalForeignKeyLongColumn(this, "reportsTo", Employees.employeeNumber)
    /**
     * Represents db column classicmodels.employees.jobTitle
     */
    val jobTitle = VarcharColumn(this, "jobTitle")
    override val columns: List<AnyColumn> = listOf(employeeNumber,lastName,firstName,extension,email,officeCode,reportsTo,jobTitle)
    override fun toValue(values: List<Any?>) = EmployeesRow(values[0] as Long,values[1] as String,values[2] as String,values[3] as String,values[4] as String,values[5] as String,values[6] as Long?,values[7] as String)
    override fun metadata(): WriteQueryAccessors<EmployeesUpdateBuilder, EmployeesInsertBuilder> = WriteQueryAccessors(EmployeesUpdateBuilder(), EmployeesInsertBuilder())
}

class EmployeesUpdateBuilder() : UpdateBuilderBase(Employees) {
    fun employeeNumber(value: Long): EmployeesUpdateBuilder = put(Employees.employeeNumber, value)
    fun lastName(value: String): EmployeesUpdateBuilder = put(Employees.lastName, value)
    fun firstName(value: String): EmployeesUpdateBuilder = put(Employees.firstName, value)
    fun extension(value: String): EmployeesUpdateBuilder = put(Employees.extension, value)
    fun email(value: String): EmployeesUpdateBuilder = put(Employees.email, value)
    fun officeCode(value: String): EmployeesUpdateBuilder = put(Employees.officeCode, value)
    fun reportsTo(value: Long?): EmployeesUpdateBuilder = put(Employees.reportsTo, value)
    fun jobTitle(value: String): EmployeesUpdateBuilder = put(Employees.jobTitle, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as EmployeesRow
      add(Employees.employeeNumber, rowData.employeeNumber)
      add(Employees.lastName, rowData.lastName)
      add(Employees.firstName, rowData.firstName)
      add(Employees.extension, rowData.extension)
      add(Employees.email, rowData.email)
      add(Employees.officeCode, rowData.officeCode)
      add(Employees.reportsTo, rowData.reportsTo)
      add(Employees.jobTitle, rowData.jobTitle)
      return where(Employees.employeeNumber.eq(rowData.employeeNumber))
    }    
        
}

class EmployeesInsertBuilder():InsertBuilderBase(){
    fun employeeNumber(value: Long): EmployeesInsertBuilder = put(Employees.employeeNumber, value)
    fun lastName(value: String): EmployeesInsertBuilder = put(Employees.lastName, value)
    fun firstName(value: String): EmployeesInsertBuilder = put(Employees.firstName, value)
    fun extension(value: String): EmployeesInsertBuilder = put(Employees.extension, value)
    fun email(value: String): EmployeesInsertBuilder = put(Employees.email, value)
    fun officeCode(value: String): EmployeesInsertBuilder = put(Employees.officeCode, value)
    fun reportsTo(value: Long?): EmployeesInsertBuilder = put(Employees.reportsTo, value)
    fun jobTitle(value: String): EmployeesInsertBuilder = put(Employees.jobTitle, value)

    fun mandatoryColumns(employeeNumber: Long, lastName: String, firstName: String, extension: String, email: String, officeCode: String, jobTitle: String) : EmployeesInsertBuilder {
      mandatory(Employees.employeeNumber, employeeNumber)
      mandatory(Employees.lastName, lastName)
      mandatory(Employees.firstName, firstName)
      mandatory(Employees.extension, extension)
      mandatory(Employees.email, email)
      mandatory(Employees.officeCode, officeCode)
      mandatory(Employees.jobTitle, jobTitle)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as EmployeesRow
      add(Employees.employeeNumber, rowData.employeeNumber)
      add(Employees.lastName, rowData.lastName)
      add(Employees.firstName, rowData.firstName)
      add(Employees.extension, rowData.extension)
      add(Employees.email, rowData.email)
      add(Employees.officeCode, rowData.officeCode)
      add(Employees.reportsTo, rowData.reportsTo)
      add(Employees.jobTitle, rowData.jobTitle)
      return execute()
    }    
        
}


data class EmployeesRow(
  val employeeNumber: Long,
  val lastName: String,
  val firstName: String,
  val extension: String,
  val email: String,
  val officeCode: String,
  val reportsTo: Long?,
  val jobTitle: String    
) : TableRowData<EmployeesUpdateBuilder, EmployeesInsertBuilder>(Employees.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Employees.employeeNumber, employeeNumber))
}
        
