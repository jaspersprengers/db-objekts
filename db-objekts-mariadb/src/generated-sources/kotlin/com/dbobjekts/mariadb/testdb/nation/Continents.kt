package com.dbobjekts.mariadb.testdb.nation

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.AnyTable
import com.dbobjekts.metadata.Table
import com.dbobjekts.api.TableRowData
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.metadata.joins.JoinBase
import com.dbobjekts.metadata.joins.JoinType
import com.dbobjekts.metadata.joins.TableJoinChain
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.UpdateBuilderBase


/**           
 * Auto-generated metadata object for db table nation.continents.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: continent_id
 *
 * Foreign keys to: 
 * References by: nation.regions
 */
object Continents:Table<ContinentsRow>("continents"), HasUpdateBuilder<ContinentsUpdateBuilder, ContinentsInsertBuilder> {
    /**
     * Represents db column nation.continents.continent_id
     */
    val continentId = com.dbobjekts.metadata.column.AutoKeyLongColumn(this, "continent_id")
    /**
     * Represents db column nation.continents.name
     */
    val name = com.dbobjekts.metadata.column.VarcharColumn(this, "name")
    override val columns: List<AnyColumn> = listOf(continentId,name)
    override fun toValue(values: List<Any?>) = ContinentsRow(values[0] as Long,values[1] as String)
    override fun metadata(): WriteQueryAccessors<ContinentsUpdateBuilder, ContinentsInsertBuilder> = WriteQueryAccessors(ContinentsUpdateBuilder(), ContinentsInsertBuilder())

    fun leftJoin(table: com.dbobjekts.mariadb.testdb.nation.Regions): com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain = com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain(this)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.mariadb.testdb.nation.Regions): com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain = com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain(this)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.mariadb.testdb.nation.Regions): com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain = com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain(this)._join(table, JoinType.RIGHT)                      
       
}

class ContinentsJoinChain(table: AnyTable, joins: List<JoinBase> = listOf()) : TableJoinChain(table, joins) {
    
    fun leftJoin(table: com.dbobjekts.mariadb.testdb.nation.Regions): com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain = com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain(this.table, this.joins)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.mariadb.testdb.nation.Regions): com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain = com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain(this.table, this.joins)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.mariadb.testdb.nation.Regions): com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain = com.dbobjekts.mariadb.testdb.nation.RegionsJoinChain(this.table, this.joins)._join(table, JoinType.RIGHT)
}


class ContinentsUpdateBuilder() : UpdateBuilderBase(Continents) {
    fun name(value: String): ContinentsUpdateBuilder = put(Continents.name, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as ContinentsRow
      add(Continents.continentId, rowData.continentId)
      add(Continents.name, rowData.name)
      return where(Continents.continentId.eq(rowData.continentId))
    }    
        
}

class ContinentsInsertBuilder():InsertBuilderBase(){
    fun name(value: String): ContinentsInsertBuilder = put(Continents.name, value)

    fun mandatoryColumns(name: String) : ContinentsInsertBuilder {
      mandatory(Continents.name, name)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as ContinentsRow
      add(Continents.name, rowData.name)
      return execute()
    }    
        
}


data class ContinentsRow(
val continentId: Long = 0,
  val name: String    
) : TableRowData<ContinentsUpdateBuilder, ContinentsInsertBuilder>(Continents.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Continents.continentId, continentId))
}
        
