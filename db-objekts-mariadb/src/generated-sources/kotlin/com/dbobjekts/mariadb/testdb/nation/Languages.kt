package com.dbobjekts.mariadb.testdb.nation

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.AnyTable
import com.dbobjekts.metadata.Table
import com.dbobjekts.api.TableRowData
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.metadata.joins.JoinBase
import com.dbobjekts.metadata.joins.JoinType
import com.dbobjekts.metadata.joins.TableJoinChain
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.UpdateBuilderBase


/**           
 * Auto-generated metadata object for db table nation.languages.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: language_id
 *
 * Foreign keys to: 
 * References by: nation.country_languages
 */
object Languages:Table<LanguagesRow>("languages"), HasUpdateBuilder<LanguagesUpdateBuilder, LanguagesInsertBuilder> {
    /**
     * Represents db column nation.languages.language_id
     */
    val languageId = com.dbobjekts.metadata.column.AutoKeyLongColumn(this, "language_id")
    /**
     * Represents db column nation.languages.language
     */
    val language = com.dbobjekts.metadata.column.VarcharColumn(this, "language")
    override val columns: List<AnyColumn> = listOf(languageId,language)
    override fun toValue(values: List<Any?>) = LanguagesRow(values[0] as Long,values[1] as String)
    override fun metadata(): WriteQueryAccessors<LanguagesUpdateBuilder, LanguagesInsertBuilder> = WriteQueryAccessors(LanguagesUpdateBuilder(), LanguagesInsertBuilder())

    fun leftJoin(table: com.dbobjekts.mariadb.testdb.nation.CountryLanguages): com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain(this)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.mariadb.testdb.nation.CountryLanguages): com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain(this)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.mariadb.testdb.nation.CountryLanguages): com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain(this)._join(table, JoinType.RIGHT)                      
       
}

class LanguagesJoinChain(table: AnyTable, joins: List<JoinBase> = listOf()) : TableJoinChain(table, joins) {
    
    fun leftJoin(table: com.dbobjekts.mariadb.testdb.nation.CountryLanguages): com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain(this.table, this.joins)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.mariadb.testdb.nation.CountryLanguages): com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain(this.table, this.joins)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.mariadb.testdb.nation.CountryLanguages): com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountryLanguagesJoinChain(this.table, this.joins)._join(table, JoinType.RIGHT)
}


class LanguagesUpdateBuilder() : UpdateBuilderBase(Languages) {
    fun language(value: String): LanguagesUpdateBuilder = put(Languages.language, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as LanguagesRow
      add(Languages.languageId, rowData.languageId)
      add(Languages.language, rowData.language)
      return where(Languages.languageId.eq(rowData.languageId))
    }    
        
}

class LanguagesInsertBuilder():InsertBuilderBase(){
    fun language(value: String): LanguagesInsertBuilder = put(Languages.language, value)

    fun mandatoryColumns(language: String) : LanguagesInsertBuilder {
      mandatory(Languages.language, language)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as LanguagesRow
      add(Languages.language, rowData.language)
      return execute()
    }    
        
}


data class LanguagesRow(
val languageId: Long = 0,
  val language: String    
) : TableRowData<LanguagesUpdateBuilder, LanguagesInsertBuilder>(Languages.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Languages.languageId, languageId))
}
        
