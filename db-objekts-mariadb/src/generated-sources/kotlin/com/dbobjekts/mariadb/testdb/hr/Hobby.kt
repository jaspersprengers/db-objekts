package com.dbobjekts.mariadb.testdb.hr

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.AnyTable
import com.dbobjekts.metadata.Table
import com.dbobjekts.api.TableRowData
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.metadata.joins.JoinBase
import com.dbobjekts.metadata.joins.JoinType
import com.dbobjekts.metadata.joins.TableJoinChain
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.UpdateBuilderBase


/**           
 * Auto-generated metadata object for db table hr.HOBBY.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: id
 *
 * Foreign keys to: 
 * References by: core.EMPLOYEE
 */
object Hobby:Table<HobbyRow>("HOBBY"), HasUpdateBuilder<HobbyUpdateBuilder, HobbyInsertBuilder> {
    /**
     * Represents db column hr.HOBBY.id
     */
    val id = com.dbobjekts.metadata.column.VarcharColumn(this, "id")
    /**
     * Represents db column hr.HOBBY.name
     */
    val name = com.dbobjekts.metadata.column.VarcharColumn(this, "name")
    override val columns: List<AnyColumn> = listOf(id,name)
    override fun toValue(values: List<Any?>) = HobbyRow(values[0] as String,values[1] as String)
    override fun metadata(): WriteQueryAccessors<HobbyUpdateBuilder, HobbyInsertBuilder> = WriteQueryAccessors(HobbyUpdateBuilder(), HobbyInsertBuilder())

    fun leftJoin(table: com.dbobjekts.mariadb.testdb.core.Employee): com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain = com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain(this)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.mariadb.testdb.core.Employee): com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain = com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain(this)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.mariadb.testdb.core.Employee): com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain = com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain(this)._join(table, JoinType.RIGHT)                      
       
}

class HobbyJoinChain(table: AnyTable, joins: List<JoinBase> = listOf()) : TableJoinChain(table, joins) {
    
    fun leftJoin(table: com.dbobjekts.mariadb.testdb.core.Employee): com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain = com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain(this.table, this.joins)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.mariadb.testdb.core.Employee): com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain = com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain(this.table, this.joins)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.mariadb.testdb.core.Employee): com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain = com.dbobjekts.mariadb.testdb.core.EmployeeJoinChain(this.table, this.joins)._join(table, JoinType.RIGHT)
}


class HobbyUpdateBuilder() : UpdateBuilderBase(Hobby) {
    fun id(value: String): HobbyUpdateBuilder = put(Hobby.id, value)
    fun name(value: String): HobbyUpdateBuilder = put(Hobby.name, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as HobbyRow
      add(Hobby.id, rowData.id)
      add(Hobby.name, rowData.name)
      return where(Hobby.id.eq(rowData.id))
    }    
        
}

class HobbyInsertBuilder():InsertBuilderBase(){
    fun id(value: String): HobbyInsertBuilder = put(Hobby.id, value)
    fun name(value: String): HobbyInsertBuilder = put(Hobby.name, value)

    fun mandatoryColumns(id: String, name: String) : HobbyInsertBuilder {
      mandatory(Hobby.id, id)
      mandatory(Hobby.name, name)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as HobbyRow
      add(Hobby.id, rowData.id)
      add(Hobby.name, rowData.name)
      return execute()
    }    
        
}


data class HobbyRow(
  val id: String,
  val name: String    
) : TableRowData<HobbyUpdateBuilder, HobbyInsertBuilder>(Hobby.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Hobby.id, id))
}
        
