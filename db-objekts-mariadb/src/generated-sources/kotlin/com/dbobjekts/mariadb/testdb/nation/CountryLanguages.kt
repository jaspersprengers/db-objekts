package com.dbobjekts.mariadb.testdb.nation

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.AnyTable
import com.dbobjekts.metadata.Table
import com.dbobjekts.api.TableRowData
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.metadata.joins.JoinBase
import com.dbobjekts.metadata.joins.JoinType
import com.dbobjekts.metadata.joins.TableJoinChain
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.UpdateBuilderBase


/**           
 * Auto-generated metadata object for db table nation.country_languages.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: [country_id, language_id]
 *
 * Foreign keys to: 
 * References by: nation.countries,nation.languages
 */
object CountryLanguages:Table<CountryLanguagesRow>("country_languages"), HasUpdateBuilder<CountryLanguagesUpdateBuilder, CountryLanguagesInsertBuilder> {
    /**
     * Represents db column nation.country_languages.country_id
     *
     * Foreign key to nation.countries.country_id
     */
    val countryId = com.dbobjekts.metadata.column.ForeignKeyLongColumn(this, "country_id", Countries.countryId)
    /**
     * Represents db column nation.country_languages.language_id
     *
     * Foreign key to nation.languages.language_id
     */
    val languageId = com.dbobjekts.metadata.column.ForeignKeyLongColumn(this, "language_id", Languages.languageId)
    /**
     * Represents db column nation.country_languages.official
     */
    val official = com.dbobjekts.metadata.column.NumberAsBooleanColumn(this, "official")
    override val columns: List<AnyColumn> = listOf(countryId,languageId,official)
    override fun toValue(values: List<Any?>) = CountryLanguagesRow(values[0] as Long,values[1] as Long,values[2] as Boolean)
    override fun metadata(): WriteQueryAccessors<CountryLanguagesUpdateBuilder, CountryLanguagesInsertBuilder> = WriteQueryAccessors(CountryLanguagesUpdateBuilder(), CountryLanguagesInsertBuilder())

    fun leftJoin(table: com.dbobjekts.mariadb.testdb.nation.Countries): com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain(this)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.mariadb.testdb.nation.Countries): com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain(this)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.mariadb.testdb.nation.Countries): com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain(this)._join(table, JoinType.RIGHT)                      
       

    fun leftJoin(table: com.dbobjekts.mariadb.testdb.nation.Languages): com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain(this)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.mariadb.testdb.nation.Languages): com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain(this)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.mariadb.testdb.nation.Languages): com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain(this)._join(table, JoinType.RIGHT)                      
       
}

class CountryLanguagesJoinChain(table: AnyTable, joins: List<JoinBase> = listOf()) : TableJoinChain(table, joins) {
    
    fun leftJoin(table: com.dbobjekts.mariadb.testdb.nation.Countries): com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain(this.table, this.joins)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.mariadb.testdb.nation.Countries): com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain(this.table, this.joins)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.mariadb.testdb.nation.Countries): com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain = com.dbobjekts.mariadb.testdb.nation.CountriesJoinChain(this.table, this.joins)._join(table, JoinType.RIGHT)
    
    fun leftJoin(table: com.dbobjekts.mariadb.testdb.nation.Languages): com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain(this.table, this.joins)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.mariadb.testdb.nation.Languages): com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain(this.table, this.joins)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.mariadb.testdb.nation.Languages): com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain = com.dbobjekts.mariadb.testdb.nation.LanguagesJoinChain(this.table, this.joins)._join(table, JoinType.RIGHT)
}


class CountryLanguagesUpdateBuilder() : UpdateBuilderBase(CountryLanguages) {
    fun countryId(value: Long): CountryLanguagesUpdateBuilder = put(CountryLanguages.countryId, value)
    fun languageId(value: Long): CountryLanguagesUpdateBuilder = put(CountryLanguages.languageId, value)
    fun official(value: Boolean): CountryLanguagesUpdateBuilder = put(CountryLanguages.official, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as CountryLanguagesRow
      add(CountryLanguages.countryId, rowData.countryId)
      add(CountryLanguages.languageId, rowData.languageId)
      add(CountryLanguages.official, rowData.official)
      return where(CountryLanguages.countryId.eq(rowData.countryId).and(CountryLanguages.languageId.eq(rowData.languageId)))
    }    
        
}

class CountryLanguagesInsertBuilder():InsertBuilderBase(){
    fun countryId(value: Long): CountryLanguagesInsertBuilder = put(CountryLanguages.countryId, value)
    fun languageId(value: Long): CountryLanguagesInsertBuilder = put(CountryLanguages.languageId, value)
    fun official(value: Boolean): CountryLanguagesInsertBuilder = put(CountryLanguages.official, value)

    fun mandatoryColumns(countryId: Long, languageId: Long, official: Boolean) : CountryLanguagesInsertBuilder {
      mandatory(CountryLanguages.countryId, countryId)
      mandatory(CountryLanguages.languageId, languageId)
      mandatory(CountryLanguages.official, official)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as CountryLanguagesRow
      add(CountryLanguages.countryId, rowData.countryId)
      add(CountryLanguages.languageId, rowData.languageId)
      add(CountryLanguages.official, rowData.official)
      return execute()
    }    
        
}


data class CountryLanguagesRow(
  val countryId: Long,
  val languageId: Long,
  val official: Boolean    
) : TableRowData<CountryLanguagesUpdateBuilder, CountryLanguagesInsertBuilder>(CountryLanguages.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(CountryLanguages.countryId, countryId),Pair(CountryLanguages.languageId, languageId))
}
        
