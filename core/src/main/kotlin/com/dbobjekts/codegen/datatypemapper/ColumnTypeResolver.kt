package com.dbobjekts.codegen.datatypemapper

import com.dbobjekts.AnyColumn
import com.dbobjekts.SchemaName
import com.dbobjekts.TableName
import com.dbobjekts.codegen.metadata.ColumnMetaData
import com.dbobjekts.metadata.Columns
import com.dbobjekts.metadata.column.*
import org.slf4j.LoggerFactory

class ColumnTypeResolver(
    val defaultMapper: ColumnTypeMapper,
    val customMappers: List<ColumnTypeMapper> = listOf(),
    val sequenceMappers: List<SequenceForPrimaryKeyMapper> = listOf()
) {
    private val logger = LoggerFactory.getLogger(ColumnTypeResolver::class.java)

    fun mapDataType(props: ColumnMappingProperties): AnyColumn =
        getCustomMapping(props)?.let {
            logger.debug("Using custom datatype for ${props.schema}.${props.table}.${props.column}")
            it
        } ?: getDefaultMapping(props)

    fun mapAutoIncrementColumn(props: ColumnMappingProperties): AnyColumn {
        val defaultColumn = getDefaultMapping(props)
        return when (defaultColumn) {
            is LongColumn -> Columns.AUTOKEY_LONG
            is IntegerColumn -> Columns.AUTOKEY_INTEGER
            else -> throw IllegalArgumentException("Only LongColumn or IntegerColumn is allowed as an autogenerated column.")
        }
    }

    fun findSequence(props: ColumnMappingProperties): String? {
        return sequenceMappers.map { it.invoke(props) }.filterNotNull().firstOrNull()
    }

    fun determineSequenceColumn(column: AnyColumn): AnyColumn =
        when (column) {
            is LongColumn -> Columns.SEQUENCE_LONG
            is IntegerColumn -> Columns.SEQUENCE_INTEGER
            else -> throw IllegalArgumentException("Only LongColumn or IntegerColumn expected.")
        }

    fun getDefaultMapping(props: ColumnMappingProperties): AnyColumn =
        defaultMapper(props)
            ?: throw IllegalStateException("Unable to find matching datatype for column ${props.schema}.${props.table}.${props.column} of type ${props.jdbcType}. No custom mapping associated.")

    private fun getCustomMapping(props: ColumnMappingProperties): AnyColumn? =
        customMappers.map { it.invoke(props) }
            .filterNotNull().firstOrNull()

    fun getForeignKeyColumnForType(schema: SchemaName, tableName: TableName, columnMetaData: ColumnMetaData): AnyColumn {
        val column = mapDataType(ColumnMappingProperties.fromMetaData(schema, tableName, columnMetaData))
        return when (column) {
            is IntegerColumn -> Columns.FOREIGN_KEY_INT
            is NullableIntegerColumn -> Columns.FOREIGN_KEY_INT_NIL
            is LongColumn -> Columns.FOREIGN_KEY_LONG
            is NullableLongColumn -> Columns.FOREIGN_KEY_LONG_NIL
            is VarcharColumn -> Columns.FOREIGN_KEY_VARCHAR
            is NullableVarcharColumn -> Columns.FOREIGN_KEY_VARCHAR_NIL
            else -> throw IllegalArgumentException("Column type ${column.javaClass.simpleName} cannot be used as a foreign key. It has to be of numeric of character type")
        }
    }


}
