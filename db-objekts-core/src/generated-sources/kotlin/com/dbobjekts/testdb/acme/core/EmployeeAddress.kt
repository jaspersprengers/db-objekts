package com.dbobjekts.testdb.acme.core

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.AnyTable
import com.dbobjekts.metadata.Table
import com.dbobjekts.api.TableRowData
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.metadata.joins.JoinBase
import com.dbobjekts.metadata.joins.JoinType
import com.dbobjekts.metadata.joins.TableJoinChain
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.UpdateBuilderBase


/**           
 * Auto-generated metadata object for db table CORE.EMPLOYEE_ADDRESS.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: [EMPLOYEE_ID, ADDRESS_ID]
 *
 * Foreign keys to: 
 * References by: CORE.EMPLOYEE,CORE.ADDRESS
 */
object EmployeeAddress:Table<EmployeeAddressRow>("EMPLOYEE_ADDRESS"), HasUpdateBuilder<EmployeeAddressUpdateBuilder, EmployeeAddressInsertBuilder> {
    /**
     * Represents db column CORE.EMPLOYEE_ADDRESS.EMPLOYEE_ID
     *
     * Foreign key to CORE.EMPLOYEE.ID
     */
    val employeeId = com.dbobjekts.metadata.column.ForeignKeyLongColumn(this, "EMPLOYEE_ID", Employee.id)
    /**
     * Represents db column CORE.EMPLOYEE_ADDRESS.ADDRESS_ID
     *
     * Foreign key to CORE.ADDRESS.ID
     */
    val addressId = com.dbobjekts.metadata.column.ForeignKeyLongColumn(this, "ADDRESS_ID", Address.id)
    /**
     * Represents db column CORE.EMPLOYEE_ADDRESS.KIND
     */
    val kind = com.dbobjekts.fixture.columns.AddressTypeAsStringColumn(this, "KIND")
    override val columns: List<AnyColumn> = listOf(employeeId,addressId,kind)
    override fun toValue(values: List<Any?>) = EmployeeAddressRow(values[0] as Long,values[1] as Long,values[2] as com.dbobjekts.fixture.columns.AddressType)
    override fun metadata(): WriteQueryAccessors<EmployeeAddressUpdateBuilder, EmployeeAddressInsertBuilder> = WriteQueryAccessors(EmployeeAddressUpdateBuilder(), EmployeeAddressInsertBuilder())

    fun leftJoin(table: com.dbobjekts.testdb.acme.core.Employee): com.dbobjekts.testdb.acme.core.EmployeeJoinChain = com.dbobjekts.testdb.acme.core.EmployeeJoinChain(this)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.core.Employee): com.dbobjekts.testdb.acme.core.EmployeeJoinChain = com.dbobjekts.testdb.acme.core.EmployeeJoinChain(this)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.core.Employee): com.dbobjekts.testdb.acme.core.EmployeeJoinChain = com.dbobjekts.testdb.acme.core.EmployeeJoinChain(this)._join(table, JoinType.RIGHT)                      
       

    fun leftJoin(table: com.dbobjekts.testdb.acme.core.Address): com.dbobjekts.testdb.acme.core.AddressJoinChain = com.dbobjekts.testdb.acme.core.AddressJoinChain(this)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.core.Address): com.dbobjekts.testdb.acme.core.AddressJoinChain = com.dbobjekts.testdb.acme.core.AddressJoinChain(this)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.core.Address): com.dbobjekts.testdb.acme.core.AddressJoinChain = com.dbobjekts.testdb.acme.core.AddressJoinChain(this)._join(table, JoinType.RIGHT)                      
       
}

class EmployeeAddressJoinChain(table: AnyTable, joins: List<JoinBase> = listOf()) : TableJoinChain(table, joins) {
    
    fun leftJoin(table: com.dbobjekts.testdb.acme.core.Employee): com.dbobjekts.testdb.acme.core.EmployeeJoinChain = com.dbobjekts.testdb.acme.core.EmployeeJoinChain(this.table, this.joins)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.core.Employee): com.dbobjekts.testdb.acme.core.EmployeeJoinChain = com.dbobjekts.testdb.acme.core.EmployeeJoinChain(this.table, this.joins)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.core.Employee): com.dbobjekts.testdb.acme.core.EmployeeJoinChain = com.dbobjekts.testdb.acme.core.EmployeeJoinChain(this.table, this.joins)._join(table, JoinType.RIGHT)
    
    fun leftJoin(table: com.dbobjekts.testdb.acme.core.Address): com.dbobjekts.testdb.acme.core.AddressJoinChain = com.dbobjekts.testdb.acme.core.AddressJoinChain(this.table, this.joins)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.core.Address): com.dbobjekts.testdb.acme.core.AddressJoinChain = com.dbobjekts.testdb.acme.core.AddressJoinChain(this.table, this.joins)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.core.Address): com.dbobjekts.testdb.acme.core.AddressJoinChain = com.dbobjekts.testdb.acme.core.AddressJoinChain(this.table, this.joins)._join(table, JoinType.RIGHT)
}


class EmployeeAddressUpdateBuilder() : UpdateBuilderBase(EmployeeAddress) {
    fun employeeId(value: Long): EmployeeAddressUpdateBuilder = put(EmployeeAddress.employeeId, value)
    fun addressId(value: Long): EmployeeAddressUpdateBuilder = put(EmployeeAddress.addressId, value)
    fun kind(value: com.dbobjekts.fixture.columns.AddressType): EmployeeAddressUpdateBuilder = put(EmployeeAddress.kind, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as EmployeeAddressRow
      add(EmployeeAddress.employeeId, rowData.employeeId)
      add(EmployeeAddress.addressId, rowData.addressId)
      add(EmployeeAddress.kind, rowData.kind)
      return where(EmployeeAddress.employeeId.eq(rowData.employeeId).and(EmployeeAddress.addressId.eq(rowData.addressId)))
    }    
        
}

class EmployeeAddressInsertBuilder():InsertBuilderBase(){
    fun employeeId(value: Long): EmployeeAddressInsertBuilder = put(EmployeeAddress.employeeId, value)
    fun addressId(value: Long): EmployeeAddressInsertBuilder = put(EmployeeAddress.addressId, value)
    fun kind(value: com.dbobjekts.fixture.columns.AddressType): EmployeeAddressInsertBuilder = put(EmployeeAddress.kind, value)

    fun mandatoryColumns(employeeId: Long, addressId: Long, kind: com.dbobjekts.fixture.columns.AddressType) : EmployeeAddressInsertBuilder {
      mandatory(EmployeeAddress.employeeId, employeeId)
      mandatory(EmployeeAddress.addressId, addressId)
      mandatory(EmployeeAddress.kind, kind)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as EmployeeAddressRow
      add(EmployeeAddress.employeeId, rowData.employeeId)
      add(EmployeeAddress.addressId, rowData.addressId)
      add(EmployeeAddress.kind, rowData.kind)
      return execute()
    }    
        
}


data class EmployeeAddressRow(
  val employeeId: Long,
  val addressId: Long,
  val kind: com.dbobjekts.fixture.columns.AddressType    
) : TableRowData<EmployeeAddressUpdateBuilder, EmployeeAddressInsertBuilder>(EmployeeAddress.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(EmployeeAddress.employeeId, employeeId),Pair(EmployeeAddress.addressId, addressId))
}
        
