package com.dbobjekts.testdb.acme.library

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.metadata.Table
import com.dbobjekts.api.TableRowData
import com.dbobjekts.api.exception.StatementBuilderException
import com.dbobjekts.api.WriteQueryAccessors
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.UpdateBuilderBase


/**           
 * Auto-generated metadata object for db table LIBRARY.LOAN.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: [ITEM_ID, MEMBER_ID, DATE_LOANED]
 *
 * Foreign keys: [ITEM_ID to LIBRARY.ITEM.ID, MEMBER_ID to LIBRARY.MEMBER.ID] 
 */
object Loan:Table<LoanRow>("LOAN"), HasUpdateBuilder<LoanUpdateBuilder, LoanInsertBuilder> {
    /**
     * Represents db column LIBRARY.LOAN.ITEM_ID
     *
     * Foreign key to LIBRARY.ITEM.ID
     */
    val itemId = com.dbobjekts.metadata.column.ForeignKeyLongColumn(this, "ITEM_ID", Item.id)
    /**
     * Represents db column LIBRARY.LOAN.MEMBER_ID
     *
     * Foreign key to LIBRARY.MEMBER.ID
     */
    val memberId = com.dbobjekts.metadata.column.ForeignKeyLongColumn(this, "MEMBER_ID", Member.id)
    /**
     * Represents db column LIBRARY.LOAN.DATE_LOANED
     */
    val dateLoaned = com.dbobjekts.metadata.column.DateColumn(this, "DATE_LOANED")
    /**
     * Represents db column LIBRARY.LOAN.DATE_RETURNED
     */
    val dateReturned = com.dbobjekts.metadata.column.NullableDateColumn(this, "DATE_RETURNED")
    override val columns: List<AnyColumn> = listOf(itemId,memberId,dateLoaned,dateReturned)
    override fun toValue(values: List<Any?>) = LoanRow(values[0] as Long,values[1] as Long,values[2] as java.time.LocalDate,values[3] as java.time.LocalDate?)
    override fun metadata(): WriteQueryAccessors<LoanUpdateBuilder, LoanInsertBuilder> = WriteQueryAccessors(LoanUpdateBuilder(), LoanInsertBuilder())
}

class LoanUpdateBuilder() : UpdateBuilderBase(Loan) {
    fun itemId(value: Long): LoanUpdateBuilder = put(Loan.itemId, value)
    fun memberId(value: Long): LoanUpdateBuilder = put(Loan.memberId, value)
    fun dateLoaned(value: java.time.LocalDate): LoanUpdateBuilder = put(Loan.dateLoaned, value)
    fun dateReturned(value: java.time.LocalDate?): LoanUpdateBuilder = put(Loan.dateReturned, value)

    /**
     * Warning: this method will throw a StatementBuilderException at runtime because Loan does not have a primary key, or has a composite one.
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long = 
      throw StatementBuilderException("Sorry, but you cannot use row-based updates for table Loan. There must be exactly one column marked as primary key.")                
            
}

class LoanInsertBuilder():InsertBuilderBase(){
    fun itemId(value: Long): LoanInsertBuilder = put(Loan.itemId, value)
    fun memberId(value: Long): LoanInsertBuilder = put(Loan.memberId, value)
    fun dateLoaned(value: java.time.LocalDate): LoanInsertBuilder = put(Loan.dateLoaned, value)
    fun dateReturned(value: java.time.LocalDate?): LoanInsertBuilder = put(Loan.dateReturned, value)

    fun mandatoryColumns(itemId: Long, memberId: Long, dateLoaned: java.time.LocalDate) : LoanInsertBuilder {
      mandatory(Loan.itemId, itemId)
      mandatory(Loan.memberId, memberId)
      mandatory(Loan.dateLoaned, dateLoaned)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as LoanRow
      add(Loan.itemId, rowData.itemId)
      add(Loan.memberId, rowData.memberId)
      add(Loan.dateLoaned, rowData.dateLoaned)
      add(Loan.dateReturned, rowData.dateReturned)
      return execute()
    }    
        
}


data class LoanRow(
  val itemId: Long,
  val memberId: Long,
  val dateLoaned: java.time.LocalDate,
  val dateReturned: java.time.LocalDate?    
) : TableRowData<LoanUpdateBuilder, LoanInsertBuilder>(Loan.metadata())
        
