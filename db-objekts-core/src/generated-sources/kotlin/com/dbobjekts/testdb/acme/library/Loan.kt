package com.dbobjekts.testdb.acme.library

import com.dbobjekts.metadata.Table
import com.dbobjekts.api.TableRowData
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.metadata.joins.JoinBase
import com.dbobjekts.metadata.joins.JoinType
import com.dbobjekts.metadata.joins.TableJoinChain
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.UpdateBuilderBase
import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.AnyTable


/**           
 * Auto-generated metadata object for db table LIBRARY.LOAN.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: [ITEM_ID, MEMBER_ID, DATE_LOANED]
 *
 * Foreign keys to: 
 * References by: LIBRARY.ITEM,LIBRARY.MEMBER
 */
object Loan:Table<LoanRow>("LOAN"), HasUpdateBuilder<LoanUpdateBuilder, LoanInsertBuilder> {
    /**
     * Represents db column LIBRARY.LOAN.ITEM_ID
     *
     * Foreign key to LIBRARY.ITEM.ID
     */
    val itemId = com.dbobjekts.metadata.column.ForeignKeyLongColumn(this, "ITEM_ID", Item.id)
    /**
     * Represents db column LIBRARY.LOAN.MEMBER_ID
     *
     * Foreign key to LIBRARY.MEMBER.ID
     */
    val memberId = com.dbobjekts.metadata.column.ForeignKeyLongColumn(this, "MEMBER_ID", Member.id)
    /**
     * Represents db column LIBRARY.LOAN.DATE_LOANED
     */
    val dateLoaned = com.dbobjekts.metadata.column.DateColumn(this, "DATE_LOANED")
    /**
     * Represents db column LIBRARY.LOAN.DATE_RETURNED
     */
    val dateReturned = com.dbobjekts.metadata.column.NullableDateColumn(this, "DATE_RETURNED")
    override val columns: List<AnyColumn> = listOf(itemId,memberId,dateLoaned,dateReturned)
    override fun toValue(values: List<Any?>) = LoanRow(values[0] as Long,values[1] as Long,values[2] as java.time.LocalDate,values[3] as java.time.LocalDate?)
    override fun metadata(): WriteQueryAccessors<LoanUpdateBuilder, LoanInsertBuilder> = WriteQueryAccessors(LoanUpdateBuilder(), LoanInsertBuilder())

    fun leftJoin(table: com.dbobjekts.testdb.acme.library.Item): com.dbobjekts.testdb.acme.library.ItemJoinChain = com.dbobjekts.testdb.acme.library.ItemJoinChain(this)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.library.Item): com.dbobjekts.testdb.acme.library.ItemJoinChain = com.dbobjekts.testdb.acme.library.ItemJoinChain(this)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.library.Item): com.dbobjekts.testdb.acme.library.ItemJoinChain = com.dbobjekts.testdb.acme.library.ItemJoinChain(this)._join(table, JoinType.RIGHT)                      
       

    fun leftJoin(table: com.dbobjekts.testdb.acme.library.Member): com.dbobjekts.testdb.acme.library.MemberJoinChain = com.dbobjekts.testdb.acme.library.MemberJoinChain(this)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.library.Member): com.dbobjekts.testdb.acme.library.MemberJoinChain = com.dbobjekts.testdb.acme.library.MemberJoinChain(this)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.library.Member): com.dbobjekts.testdb.acme.library.MemberJoinChain = com.dbobjekts.testdb.acme.library.MemberJoinChain(this)._join(table, JoinType.RIGHT)                      
       
}

class LoanJoinChain(table: AnyTable, joins: List<JoinBase> = listOf()) : TableJoinChain(table, joins) {
    
    fun leftJoin(table: com.dbobjekts.testdb.acme.library.Item): com.dbobjekts.testdb.acme.library.ItemJoinChain = com.dbobjekts.testdb.acme.library.ItemJoinChain(this.table, this.joins)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.library.Item): com.dbobjekts.testdb.acme.library.ItemJoinChain = com.dbobjekts.testdb.acme.library.ItemJoinChain(this.table, this.joins)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.library.Item): com.dbobjekts.testdb.acme.library.ItemJoinChain = com.dbobjekts.testdb.acme.library.ItemJoinChain(this.table, this.joins)._join(table, JoinType.RIGHT)
    
    fun leftJoin(table: com.dbobjekts.testdb.acme.library.Member): com.dbobjekts.testdb.acme.library.MemberJoinChain = com.dbobjekts.testdb.acme.library.MemberJoinChain(this.table, this.joins)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.library.Member): com.dbobjekts.testdb.acme.library.MemberJoinChain = com.dbobjekts.testdb.acme.library.MemberJoinChain(this.table, this.joins)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.library.Member): com.dbobjekts.testdb.acme.library.MemberJoinChain = com.dbobjekts.testdb.acme.library.MemberJoinChain(this.table, this.joins)._join(table, JoinType.RIGHT)
}


class LoanUpdateBuilder() : UpdateBuilderBase(Loan) {
    fun itemId(value: Long): LoanUpdateBuilder = put(Loan.itemId, value)
    fun memberId(value: Long): LoanUpdateBuilder = put(Loan.memberId, value)
    fun dateLoaned(value: java.time.LocalDate): LoanUpdateBuilder = put(Loan.dateLoaned, value)
    fun dateReturned(value: java.time.LocalDate?): LoanUpdateBuilder = put(Loan.dateReturned, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as LoanRow
      add(Loan.itemId, rowData.itemId)
      add(Loan.memberId, rowData.memberId)
      add(Loan.dateLoaned, rowData.dateLoaned)
      add(Loan.dateReturned, rowData.dateReturned)
      return where(Loan.itemId.eq(rowData.itemId).and(Loan.memberId.eq(rowData.memberId)).and(Loan.dateLoaned.eq(rowData.dateLoaned)))
    }    
        
}

class LoanInsertBuilder():InsertBuilderBase(){
    fun itemId(value: Long): LoanInsertBuilder = put(Loan.itemId, value)
    fun memberId(value: Long): LoanInsertBuilder = put(Loan.memberId, value)
    fun dateLoaned(value: java.time.LocalDate): LoanInsertBuilder = put(Loan.dateLoaned, value)
    fun dateReturned(value: java.time.LocalDate?): LoanInsertBuilder = put(Loan.dateReturned, value)

    fun mandatoryColumns(itemId: Long, memberId: Long, dateLoaned: java.time.LocalDate) : LoanInsertBuilder {
      mandatory(Loan.itemId, itemId)
      mandatory(Loan.memberId, memberId)
      mandatory(Loan.dateLoaned, dateLoaned)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as LoanRow
      add(Loan.itemId, rowData.itemId)
      add(Loan.memberId, rowData.memberId)
      add(Loan.dateLoaned, rowData.dateLoaned)
      add(Loan.dateReturned, rowData.dateReturned)
      return execute()
    }    
        
}


data class LoanRow(
  val itemId: Long,
  val memberId: Long,
  val dateLoaned: java.time.LocalDate,
  val dateReturned: java.time.LocalDate?    
) : TableRowData<LoanUpdateBuilder, LoanInsertBuilder>(Loan.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Loan.itemId, itemId),Pair(Loan.memberId, memberId),Pair(Loan.dateLoaned, dateLoaned))
}
        
