package com.dbobjekts.testdb.acme.library

import com.dbobjekts.metadata.Table
import com.dbobjekts.api.TableRowData
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.metadata.joins.JoinBase
import com.dbobjekts.metadata.joins.JoinType
import com.dbobjekts.metadata.joins.TableJoinChain
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.UpdateBuilderBase
import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.AnyTable


/**           
 * Auto-generated metadata object for db table LIBRARY.ITEM.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: ID
 *
 * Foreign keys to: 
 * References by: LIBRARY.BOOK,LIBRARY.LOAN
 */
object Item:Table<ItemRow>("ITEM"), HasUpdateBuilder<ItemUpdateBuilder, ItemInsertBuilder> {
    /**
     * Represents db column LIBRARY.ITEM.ID
     */
    val id = com.dbobjekts.metadata.column.SequenceKeyLongColumn(this, "ID", "ITEM_SEQ")
    /**
     * Represents db column LIBRARY.ITEM.ISBN
     *
     * Foreign key to LIBRARY.BOOK.ISBN
     */
    val isbn = com.dbobjekts.metadata.column.ForeignKeyVarcharColumn(this, "ISBN", Book.isbn)
    /**
     * Represents db column LIBRARY.ITEM.DATE_ACQUIRED
     */
    val dateAcquired = com.dbobjekts.metadata.column.DateColumn(this, "DATE_ACQUIRED")
    override val columns: List<AnyColumn> = listOf(id,isbn,dateAcquired)
    override fun toValue(values: List<Any?>) = ItemRow(values[0] as Long,values[1] as String,values[2] as java.time.LocalDate)
    override fun metadata(): WriteQueryAccessors<ItemUpdateBuilder, ItemInsertBuilder> = WriteQueryAccessors(ItemUpdateBuilder(), ItemInsertBuilder())

    fun leftJoin(table: com.dbobjekts.testdb.acme.library.Book): com.dbobjekts.testdb.acme.library.BookJoinChain = com.dbobjekts.testdb.acme.library.BookJoinChain(this)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.library.Book): com.dbobjekts.testdb.acme.library.BookJoinChain = com.dbobjekts.testdb.acme.library.BookJoinChain(this)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.library.Book): com.dbobjekts.testdb.acme.library.BookJoinChain = com.dbobjekts.testdb.acme.library.BookJoinChain(this)._join(table, JoinType.RIGHT)                      
       

    fun leftJoin(table: com.dbobjekts.testdb.acme.library.Loan): com.dbobjekts.testdb.acme.library.LoanJoinChain = com.dbobjekts.testdb.acme.library.LoanJoinChain(this)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.library.Loan): com.dbobjekts.testdb.acme.library.LoanJoinChain = com.dbobjekts.testdb.acme.library.LoanJoinChain(this)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.library.Loan): com.dbobjekts.testdb.acme.library.LoanJoinChain = com.dbobjekts.testdb.acme.library.LoanJoinChain(this)._join(table, JoinType.RIGHT)                      
       
}

class ItemJoinChain(table: AnyTable, joins: List<JoinBase> = listOf()) : TableJoinChain(table, joins) {
    
    fun leftJoin(table: com.dbobjekts.testdb.acme.library.Book): com.dbobjekts.testdb.acme.library.BookJoinChain = com.dbobjekts.testdb.acme.library.BookJoinChain(this.table, this.joins)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.library.Book): com.dbobjekts.testdb.acme.library.BookJoinChain = com.dbobjekts.testdb.acme.library.BookJoinChain(this.table, this.joins)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.library.Book): com.dbobjekts.testdb.acme.library.BookJoinChain = com.dbobjekts.testdb.acme.library.BookJoinChain(this.table, this.joins)._join(table, JoinType.RIGHT)
    
    fun leftJoin(table: com.dbobjekts.testdb.acme.library.Loan): com.dbobjekts.testdb.acme.library.LoanJoinChain = com.dbobjekts.testdb.acme.library.LoanJoinChain(this.table, this.joins)._join(table, JoinType.LEFT)
    fun innerJoin(table: com.dbobjekts.testdb.acme.library.Loan): com.dbobjekts.testdb.acme.library.LoanJoinChain = com.dbobjekts.testdb.acme.library.LoanJoinChain(this.table, this.joins)._join(table, JoinType.INNER)
    fun rightJoin(table: com.dbobjekts.testdb.acme.library.Loan): com.dbobjekts.testdb.acme.library.LoanJoinChain = com.dbobjekts.testdb.acme.library.LoanJoinChain(this.table, this.joins)._join(table, JoinType.RIGHT)
}


class ItemUpdateBuilder() : UpdateBuilderBase(Item) {
    fun isbn(value: String): ItemUpdateBuilder = put(Item.isbn, value)
    fun dateAcquired(value: java.time.LocalDate): ItemUpdateBuilder = put(Item.dateAcquired, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as ItemRow
      add(Item.id, rowData.id)
      add(Item.isbn, rowData.isbn)
      add(Item.dateAcquired, rowData.dateAcquired)
      return where(Item.id.eq(rowData.id))
    }    
        
}

class ItemInsertBuilder():InsertBuilderBase(){
    fun isbn(value: String): ItemInsertBuilder = put(Item.isbn, value)
    fun dateAcquired(value: java.time.LocalDate): ItemInsertBuilder = put(Item.dateAcquired, value)

    fun mandatoryColumns(isbn: String, dateAcquired: java.time.LocalDate) : ItemInsertBuilder {
      mandatory(Item.isbn, isbn)
      mandatory(Item.dateAcquired, dateAcquired)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as ItemRow
      add(Item.isbn, rowData.isbn)
      add(Item.dateAcquired, rowData.dateAcquired)
      return execute()
    }    
        
}


data class ItemRow(
val id: Long = 0,
  val isbn: String,
  val dateAcquired: java.time.LocalDate    
) : TableRowData<ItemUpdateBuilder, ItemInsertBuilder>(Item.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Item.id, id))
}
        
