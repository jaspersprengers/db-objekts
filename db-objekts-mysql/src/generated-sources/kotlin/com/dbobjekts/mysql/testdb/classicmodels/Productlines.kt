package com.dbobjekts.mysql.testdb.classicmodels

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.metadata.Table
import com.dbobjekts.api.TableRowData
import com.dbobjekts.metadata.column.IsGeneratedPrimaryKey
import com.dbobjekts.api.exception.StatementBuilderException
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.UpdateBuilderBase


/**           
 * Auto-generated metadata object for db table classicmodels.productlines.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: productLine
 *
 * Foreign keys: [] 
 */
object Productlines:Table<ProductlinesRow>("productlines"), HasUpdateBuilder<ProductlinesUpdateBuilder, ProductlinesInsertBuilder> {
    /**
     * Represents db column classicmodels.productlines.productLine
     */
    val productline = com.dbobjekts.metadata.column.VarcharColumn(this, "productLine")
    /**
     * Represents db column classicmodels.productlines.textDescription
     */
    val textdescription = com.dbobjekts.metadata.column.NullableVarcharColumn(this, "textDescription")
    /**
     * Represents db column classicmodels.productlines.htmlDescription
     */
    val htmldescription = com.dbobjekts.metadata.column.NullableVarcharColumn(this, "htmlDescription")
    /**
     * Represents db column classicmodels.productlines.image
     */
    val image = com.dbobjekts.metadata.column.NullableByteArrayColumn(this, "image")
    override val columns: List<AnyColumn> = listOf(productline,textdescription,htmldescription,image)
    override fun toValue(values: List<Any?>) = ProductlinesRow(values[0] as String,values[1] as String?,values[2] as String?,values[3] as ByteArray?)
    override fun metadata(): WriteQueryAccessors<ProductlinesUpdateBuilder, ProductlinesInsertBuilder> = WriteQueryAccessors(ProductlinesUpdateBuilder(), ProductlinesInsertBuilder())
}

class ProductlinesUpdateBuilder() : UpdateBuilderBase(Productlines) {
    fun productline(value: String): ProductlinesUpdateBuilder = put(Productlines.productline, value)
    fun textdescription(value: String?): ProductlinesUpdateBuilder = put(Productlines.textdescription, value)
    fun htmldescription(value: String?): ProductlinesUpdateBuilder = put(Productlines.htmldescription, value)
    fun image(value: ByteArray?): ProductlinesUpdateBuilder = put(Productlines.image, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as ProductlinesRow
      add(Productlines.productline, rowData.productline)
      add(Productlines.textdescription, rowData.textdescription)
      add(Productlines.htmldescription, rowData.htmldescription)
      add(Productlines.image, rowData.image)
      return where(Productlines.productline.eq(rowData.productline))
    }    
        
}

class ProductlinesInsertBuilder():InsertBuilderBase(){
    fun productline(value: String): ProductlinesInsertBuilder = put(Productlines.productline, value)
    fun textdescription(value: String?): ProductlinesInsertBuilder = put(Productlines.textdescription, value)
    fun htmldescription(value: String?): ProductlinesInsertBuilder = put(Productlines.htmldescription, value)
    fun image(value: ByteArray?): ProductlinesInsertBuilder = put(Productlines.image, value)

    fun mandatoryColumns(productline: String) : ProductlinesInsertBuilder {
      mandatory(Productlines.productline, productline)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as ProductlinesRow
      add(Productlines.productline, rowData.productline)
      add(Productlines.textdescription, rowData.textdescription)
      add(Productlines.htmldescription, rowData.htmldescription)
      add(Productlines.image, rowData.image)
      return execute()
    }    
        
}


data class ProductlinesRow(
  val productline: String,
  val textdescription: String?,
  val htmldescription: String?,
  val image: ByteArray?    
) : TableRowData<ProductlinesUpdateBuilder, ProductlinesInsertBuilder>(Productlines.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Productlines.productline, productline))
}
        
