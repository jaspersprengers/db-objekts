package com.dbobjekts.mysql.testdb.classicmodels

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.TableRowData
import com.dbobjekts.metadata.Table
import com.dbobjekts.metadata.column.NullableVarcharColumn
import com.dbobjekts.metadata.column.VarcharColumn
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.statement.update.UpdateBuilderBase

/**           
 * Auto-generated metadata object for db table classicmodels.offices.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: officeCode
 *
 * Foreign keys to: 
 * References by: classicmodels.employees
 */
object Offices:Table<OfficesRow>("offices"), HasUpdateBuilder<OfficesUpdateBuilder, OfficesInsertBuilder> {
    /**
     * Represents db column classicmodels.offices.officeCode
     */
    val officeCode = VarcharColumn(this, "officeCode")
    /**
     * Represents db column classicmodels.offices.city
     */
    val city = VarcharColumn(this, "city")
    /**
     * Represents db column classicmodels.offices.phone
     */
    val phone = VarcharColumn(this, "phone")
    /**
     * Represents db column classicmodels.offices.addressLine1
     */
    val addressLine1 = VarcharColumn(this, "addressLine1")
    /**
     * Represents db column classicmodels.offices.addressLine2
     */
    val addressLine2 = NullableVarcharColumn(this, "addressLine2")
    /**
     * Represents db column classicmodels.offices.state
     */
    val state = NullableVarcharColumn(this, "state")
    /**
     * Represents db column classicmodels.offices.country
     */
    val country = VarcharColumn(this, "country")
    /**
     * Represents db column classicmodels.offices.postalCode
     */
    val postalCode = VarcharColumn(this, "postalCode")
    /**
     * Represents db column classicmodels.offices.territory
     */
    val territory = VarcharColumn(this, "territory")
    override val columns: List<AnyColumn> = listOf(officeCode,city,phone,addressLine1,addressLine2,state,country,postalCode,territory)
    override fun toValue(values: List<Any?>) = OfficesRow(values[0] as String,values[1] as String,values[2] as String,values[3] as String,values[4] as String?,values[5] as String?,values[6] as String,values[7] as String,values[8] as String)
    override fun metadata(): WriteQueryAccessors<OfficesUpdateBuilder, OfficesInsertBuilder> = WriteQueryAccessors(OfficesUpdateBuilder(), OfficesInsertBuilder())
}

class OfficesUpdateBuilder() : UpdateBuilderBase(Offices) {
    fun officeCode(value: String): OfficesUpdateBuilder = put(Offices.officeCode, value)
    fun city(value: String): OfficesUpdateBuilder = put(Offices.city, value)
    fun phone(value: String): OfficesUpdateBuilder = put(Offices.phone, value)
    fun addressLine1(value: String): OfficesUpdateBuilder = put(Offices.addressLine1, value)
    fun addressLine2(value: String?): OfficesUpdateBuilder = put(Offices.addressLine2, value)
    fun state(value: String?): OfficesUpdateBuilder = put(Offices.state, value)
    fun country(value: String): OfficesUpdateBuilder = put(Offices.country, value)
    fun postalCode(value: String): OfficesUpdateBuilder = put(Offices.postalCode, value)
    fun territory(value: String): OfficesUpdateBuilder = put(Offices.territory, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as OfficesRow
      add(Offices.officeCode, rowData.officeCode)
      add(Offices.city, rowData.city)
      add(Offices.phone, rowData.phone)
      add(Offices.addressLine1, rowData.addressLine1)
      add(Offices.addressLine2, rowData.addressLine2)
      add(Offices.state, rowData.state)
      add(Offices.country, rowData.country)
      add(Offices.postalCode, rowData.postalCode)
      add(Offices.territory, rowData.territory)
      return where(Offices.officeCode.eq(rowData.officeCode))
    }    
        
}

class OfficesInsertBuilder():InsertBuilderBase(){
    fun officeCode(value: String): OfficesInsertBuilder = put(Offices.officeCode, value)
    fun city(value: String): OfficesInsertBuilder = put(Offices.city, value)
    fun phone(value: String): OfficesInsertBuilder = put(Offices.phone, value)
    fun addressLine1(value: String): OfficesInsertBuilder = put(Offices.addressLine1, value)
    fun addressLine2(value: String?): OfficesInsertBuilder = put(Offices.addressLine2, value)
    fun state(value: String?): OfficesInsertBuilder = put(Offices.state, value)
    fun country(value: String): OfficesInsertBuilder = put(Offices.country, value)
    fun postalCode(value: String): OfficesInsertBuilder = put(Offices.postalCode, value)
    fun territory(value: String): OfficesInsertBuilder = put(Offices.territory, value)

    fun mandatoryColumns(officeCode: String, city: String, phone: String, addressLine1: String, country: String, postalCode: String, territory: String) : OfficesInsertBuilder {
      mandatory(Offices.officeCode, officeCode)
      mandatory(Offices.city, city)
      mandatory(Offices.phone, phone)
      mandatory(Offices.addressLine1, addressLine1)
      mandatory(Offices.country, country)
      mandatory(Offices.postalCode, postalCode)
      mandatory(Offices.territory, territory)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as OfficesRow
      add(Offices.officeCode, rowData.officeCode)
      add(Offices.city, rowData.city)
      add(Offices.phone, rowData.phone)
      add(Offices.addressLine1, rowData.addressLine1)
      add(Offices.addressLine2, rowData.addressLine2)
      add(Offices.state, rowData.state)
      add(Offices.country, rowData.country)
      add(Offices.postalCode, rowData.postalCode)
      add(Offices.territory, rowData.territory)
      return execute()
    }    
        
}


data class OfficesRow(
  val officeCode: String,
  val city: String,
  val phone: String,
  val addressLine1: String,
  val addressLine2: String?,
  val state: String?,
  val country: String,
  val postalCode: String,
  val territory: String    
) : TableRowData<OfficesUpdateBuilder, OfficesInsertBuilder>(Offices.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Offices.officeCode, officeCode))
}
        
