package com.dbobjekts.mysql.testdb.classicmodels

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.metadata.Table
import com.dbobjekts.api.TableRowData
import com.dbobjekts.metadata.column.IsGeneratedPrimaryKey
import com.dbobjekts.api.exception.StatementBuilderException
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.UpdateBuilderBase


/**           
 * Auto-generated metadata object for db table classicmodels.employees.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: employeeNumber
 *
 * Foreign keys: [officeCode to classicmodels.offices.officeCode, reportsTo to classicmodels.employees.employeeNumber] 
 */
object Employees:Table<EmployeesRow>("employees"), HasUpdateBuilder<EmployeesUpdateBuilder, EmployeesInsertBuilder> {
    /**
     * Represents db column classicmodels.employees.employeeNumber
     */
    val employeenumber = com.dbobjekts.metadata.column.LongColumn(this, "employeeNumber")
    /**
     * Represents db column classicmodels.employees.lastName
     */
    val lastname = com.dbobjekts.metadata.column.VarcharColumn(this, "lastName")
    /**
     * Represents db column classicmodels.employees.firstName
     */
    val firstname = com.dbobjekts.metadata.column.VarcharColumn(this, "firstName")
    /**
     * Represents db column classicmodels.employees.extension
     */
    val extension = com.dbobjekts.metadata.column.VarcharColumn(this, "extension")
    /**
     * Represents db column classicmodels.employees.email
     */
    val email = com.dbobjekts.metadata.column.VarcharColumn(this, "email")
    /**
     * Represents db column classicmodels.employees.officeCode
     *
     * Foreign key to classicmodels.offices.officeCode
     */
    val officecode = com.dbobjekts.metadata.column.ForeignKeyVarcharColumn(this, "officeCode", Offices.officecode)
    /**
     * Represents db column classicmodels.employees.reportsTo
     *
     * Foreign key to classicmodels.employees.employeeNumber
     */
    val reportsto = com.dbobjekts.metadata.column.OptionalForeignKeyLongColumn(this, "reportsTo", Employees.employeenumber)
    /**
     * Represents db column classicmodels.employees.jobTitle
     */
    val jobtitle = com.dbobjekts.metadata.column.VarcharColumn(this, "jobTitle")
    override val columns: List<AnyColumn> = listOf(employeenumber,lastname,firstname,extension,email,officecode,reportsto,jobtitle)
    override fun toValue(values: List<Any?>) = EmployeesRow(values[0] as Long,values[1] as String,values[2] as String,values[3] as String,values[4] as String,values[5] as String,values[6] as Long?,values[7] as String)
    override fun metadata(): WriteQueryAccessors<EmployeesUpdateBuilder, EmployeesInsertBuilder> = WriteQueryAccessors(EmployeesUpdateBuilder(), EmployeesInsertBuilder())
}

class EmployeesUpdateBuilder() : UpdateBuilderBase(Employees) {
    fun employeenumber(value: Long): EmployeesUpdateBuilder = put(Employees.employeenumber, value)
    fun lastname(value: String): EmployeesUpdateBuilder = put(Employees.lastname, value)
    fun firstname(value: String): EmployeesUpdateBuilder = put(Employees.firstname, value)
    fun extension(value: String): EmployeesUpdateBuilder = put(Employees.extension, value)
    fun email(value: String): EmployeesUpdateBuilder = put(Employees.email, value)
    fun officecode(value: String): EmployeesUpdateBuilder = put(Employees.officecode, value)
    fun reportsto(value: Long?): EmployeesUpdateBuilder = put(Employees.reportsto, value)
    fun jobtitle(value: String): EmployeesUpdateBuilder = put(Employees.jobtitle, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as EmployeesRow
      add(Employees.employeenumber, rowData.employeenumber)
      add(Employees.lastname, rowData.lastname)
      add(Employees.firstname, rowData.firstname)
      add(Employees.extension, rowData.extension)
      add(Employees.email, rowData.email)
      add(Employees.officecode, rowData.officecode)
      add(Employees.reportsto, rowData.reportsto)
      add(Employees.jobtitle, rowData.jobtitle)
      return where(Employees.employeenumber.eq(rowData.employeenumber))
    }    
        
}

class EmployeesInsertBuilder():InsertBuilderBase(){
    fun employeenumber(value: Long): EmployeesInsertBuilder = put(Employees.employeenumber, value)
    fun lastname(value: String): EmployeesInsertBuilder = put(Employees.lastname, value)
    fun firstname(value: String): EmployeesInsertBuilder = put(Employees.firstname, value)
    fun extension(value: String): EmployeesInsertBuilder = put(Employees.extension, value)
    fun email(value: String): EmployeesInsertBuilder = put(Employees.email, value)
    fun officecode(value: String): EmployeesInsertBuilder = put(Employees.officecode, value)
    fun reportsto(value: Long?): EmployeesInsertBuilder = put(Employees.reportsto, value)
    fun jobtitle(value: String): EmployeesInsertBuilder = put(Employees.jobtitle, value)

    fun mandatoryColumns(employeenumber: Long, lastname: String, firstname: String, extension: String, email: String, officecode: String, jobtitle: String) : EmployeesInsertBuilder {
      mandatory(Employees.employeenumber, employeenumber)
      mandatory(Employees.lastname, lastname)
      mandatory(Employees.firstname, firstname)
      mandatory(Employees.extension, extension)
      mandatory(Employees.email, email)
      mandatory(Employees.officecode, officecode)
      mandatory(Employees.jobtitle, jobtitle)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as EmployeesRow
      add(Employees.employeenumber, rowData.employeenumber)
      add(Employees.lastname, rowData.lastname)
      add(Employees.firstname, rowData.firstname)
      add(Employees.extension, rowData.extension)
      add(Employees.email, rowData.email)
      add(Employees.officecode, rowData.officecode)
      add(Employees.reportsto, rowData.reportsto)
      add(Employees.jobtitle, rowData.jobtitle)
      return execute()
    }    
        
}


data class EmployeesRow(
  val employeenumber: Long,
  val lastname: String,
  val firstname: String,
  val extension: String,
  val email: String,
  val officecode: String,
  val reportsto: Long?,
  val jobtitle: String    
) : TableRowData<EmployeesUpdateBuilder, EmployeesInsertBuilder>(Employees.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Employees.employeenumber, employeenumber))
}
        
