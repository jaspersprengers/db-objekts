package com.dbobjekts.mysql.testdb.classicmodels

import com.dbobjekts.api.AnyColumn
import com.dbobjekts.api.TableRowData
import com.dbobjekts.metadata.Table
import com.dbobjekts.metadata.column.BigDecimalColumn
import com.dbobjekts.metadata.column.DateColumn
import com.dbobjekts.metadata.column.ForeignKeyLongColumn
import com.dbobjekts.metadata.column.VarcharColumn
import com.dbobjekts.statement.WriteQueryAccessors
import com.dbobjekts.statement.insert.InsertBuilderBase
import com.dbobjekts.statement.update.HasUpdateBuilder
import com.dbobjekts.statement.update.UpdateBuilderBase

/**           
 * Auto-generated metadata object for db table classicmodels.payments.
 *
 * Do not edit this file manually! Always use [com.dbobjekts.codegen.CodeGenerator] when the metadata model is no longer in sync with the database.           
 *
 * Primary keys: [customerNumber, checkNumber]
 *
 * Foreign keys to: 
 * References by: classicmodels.customers
 */
object Payments:Table<PaymentsRow>("payments"), HasUpdateBuilder<PaymentsUpdateBuilder, PaymentsInsertBuilder> {
    /**
     * Represents db column classicmodels.payments.customerNumber
     *
     * Foreign key to classicmodels.customers.customerNumber
     */
    val customernumber = ForeignKeyLongColumn(this, "customerNumber", Customers.customernumber)
    /**
     * Represents db column classicmodels.payments.checkNumber
     */
    val checknumber = VarcharColumn(this, "checkNumber")
    /**
     * Represents db column classicmodels.payments.paymentDate
     */
    val paymentdate = DateColumn(this, "paymentDate")
    /**
     * Represents db column classicmodels.payments.amount
     */
    val amount = BigDecimalColumn(this, "amount")
    override val columns: List<AnyColumn> = listOf(customernumber,checknumber,paymentdate,amount)
    override fun toValue(values: List<Any?>) = PaymentsRow(values[0] as Long,values[1] as String,values[2] as java.time.LocalDate,values[3] as java.math.BigDecimal)
    override fun metadata(): WriteQueryAccessors<PaymentsUpdateBuilder, PaymentsInsertBuilder> = WriteQueryAccessors(PaymentsUpdateBuilder(), PaymentsInsertBuilder())
}

class PaymentsUpdateBuilder() : UpdateBuilderBase(Payments) {
    fun customernumber(value: Long): PaymentsUpdateBuilder = put(Payments.customernumber, value)
    fun checknumber(value: String): PaymentsUpdateBuilder = put(Payments.checknumber, value)
    fun paymentdate(value: java.time.LocalDate): PaymentsUpdateBuilder = put(Payments.paymentdate, value)
    fun amount(value: java.math.BigDecimal): PaymentsUpdateBuilder = put(Payments.amount, value)
    
    /**
     * FOR INTERNAL USE ONLY
     */
    override fun updateRow(rowData: TableRowData<*, *>): Long {
      rowData as PaymentsRow
      add(Payments.customernumber, rowData.customernumber)
      add(Payments.checknumber, rowData.checknumber)
      add(Payments.paymentdate, rowData.paymentdate)
      add(Payments.amount, rowData.amount)
      return where(Payments.customernumber.eq(rowData.customernumber).and(Payments.checknumber.eq(rowData.checknumber)))
    }    
        
}

class PaymentsInsertBuilder():InsertBuilderBase(){
    fun customernumber(value: Long): PaymentsInsertBuilder = put(Payments.customernumber, value)
    fun checknumber(value: String): PaymentsInsertBuilder = put(Payments.checknumber, value)
    fun paymentdate(value: java.time.LocalDate): PaymentsInsertBuilder = put(Payments.paymentdate, value)
    fun amount(value: java.math.BigDecimal): PaymentsInsertBuilder = put(Payments.amount, value)

    fun mandatoryColumns(customernumber: Long, checknumber: String, paymentdate: java.time.LocalDate, amount: java.math.BigDecimal) : PaymentsInsertBuilder {
      mandatory(Payments.customernumber, customernumber)
      mandatory(Payments.checknumber, checknumber)
      mandatory(Payments.paymentdate, paymentdate)
      mandatory(Payments.amount, amount)
      return this
    }


    override fun insertRow(rowData: TableRowData<*, *>): Long {
      rowData as PaymentsRow
      add(Payments.customernumber, rowData.customernumber)
      add(Payments.checknumber, rowData.checknumber)
      add(Payments.paymentdate, rowData.paymentdate)
      add(Payments.amount, rowData.amount)
      return execute()
    }    
        
}


data class PaymentsRow(
  val customernumber: Long,
  val checknumber: String,
  val paymentdate: java.time.LocalDate,
  val amount: java.math.BigDecimal    
) : TableRowData<PaymentsUpdateBuilder, PaymentsInsertBuilder>(Payments.metadata()){
     override val primaryKeys = listOf<Pair<AnyColumn, Any?>>(Pair(Payments.customernumber, customernumber),Pair(Payments.checknumber, checknumber))
}
        
